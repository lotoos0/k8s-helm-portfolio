
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: {{ .Values.namespace }}
  labels:
    app: api
    {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels: { app: api }
  template:
    metadata:
      labels:
        app: api
        {{- include "app.labels" . | nindent 8 }}
    spec:
      terminationGracePeriodSeconds: 20
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
        - name: api
          image: "{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef: { name: app-config }
            {{- if .Values.secrets }}
            - secretRef: { name: app-secret }
            {{- end }}
          startupProbe:
            httpGet: { path: /healthz, port: http }
            failureThreshold: 10
            periodSeconds: 5
            timeoutSeconds: 2
          readinessProbe:
            httpGet: { path: /ready, port: http }
            initialDelaySeconds: 2
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet: { path: /healthz, port: http }
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities: { drop: ["ALL"] }
          resources:
            {{- toYaml .Values.api.resources | nindent 12 }}

